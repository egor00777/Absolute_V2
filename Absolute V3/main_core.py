# Form implementation generated from reading ui file 'main_core.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
from os import path, chdir, startfile
chdir(path.dirname(path.abspath(__file__)))



from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QThread,pyqtSignal
import sqlite3 as sq

import speech_recognition as sr

from os import path, chdir
from pyttsx3 import init

















class pr():
        import webbrowser, os, time, random,datetime
        import pyautogui as pw
        import aspose.words as aw
        from ctypes import cast, POINTER
        from comtypes import CLSCTX_ALL
        from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
        from pyttsx3 import init
        from win32comext.shell import shell, shellcon   # pip install pywin32
        from words2numsrus import NumberExtractor
        from selenium import webdriver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.chrome.options import Options

        def ender_phrase(self):
                phrases_ok = ['есть сэр','готово','сделано','исполненно',' ','так точно','выполнено', 'как прикажите', "как пожелаете", "прошу", " "]
                self.Voise(self,phrases_ok[self.random.randrange(1,len(phrases_ok),1)])

        def Voise(self,phrase):
                case_gender=['Ирина','Александр','Анна',"Елена"]
                number = case_gender.index(voice_m.replace('\n',''))
                voises = ['','Aleksandr','Anna','Elena']
                tts = init()
                voices = tts.getProperty('voices')
                tts.setProperty('rate', speed_m+125)  # 150 words per minute
                tts.setProperty('volume', voulme_m/100)  # 80% volume
                for voice in voices:
                        if voice.name == voises[int(number)]:
                                tts.setProperty('voice', voice.id)
                tts.say(phrase)
                tts.runAndWait()


        def P0(self,command,list_programm):
                pass



        #Запуск музыки
        def P1(self,command,list_programm):
                if music_m=='':
                        o = self.Options()
                        o.add_experimental_option("detach", True)

                        o.add_argument("--disable-infobars")
                        o.add_argument("start-maximized")
                        o.add_argument("--disable-extensions")
                        # Pass the argument 1 to allow and 2 to block
                        o.add_experimental_option("prefs", {"profile.default_content_setting_values.notifications": 1})
                        driver = self.webdriver.Chrome(options=o)
                        driver.get('https://vk-save.com/playlist625975121_22_8d72a7092165bbd32a?back_url=%2F%3Fq%3DMode%253A%2540%2524%2523%2525%255Elast%2520year%2520of%2520life%2540%2524%2523%2525%255E')
                        button = driver.find_element(self.By.CLASS_NAME, 'ext_action_btn_title.play')
                        button.click()
                        windows = driver.window_handles
                        driver.switch_to.window(windows[1])
                        driver.close()
                else:
                        self.webbrowser.open(music_m)

        #Протокол депрессия
        def P2(self,command,list_programm):
                link=(list_programm[1])
                if link[0]!='0':
                        self.os.startfile(link)
                        self.P1(command,list_programm)
                        self.ender_phrase(self)
                else:
                        self.Voise('Невозможно выполнить протокол')

        #Протокол суицид
        def P3(self,command,list_programm):
                self.os.system("shutdown /p")
                self.Voise('отключение через 3')
                self.time.sleep(1)
                self.Voise('2')
                self.time.sleep(1)
                self.Voise('1')

        #Открой браузер
        def P4(self,command,list_programm):
                self.webbrowser.open("https://www.google.ru/?hl=ru")
                self.ender_phrase(self)
        #Открой телеграмм
        def P5(self,command,list_programm):
                link=(list_programm[0])
                if link[0]!='0':
                        self.os.startfile(link) # Выполнение команды
                        self.ender_phrase(self)
                else:
                        self.Voise('Данная программа не найдена') # Ответ об ошибке

        #Открой вконтакте
        def P6(self,command,list_programm):
                self.webbrowser.open("https://vk.com/feed")
                self.ender_phrase(self)
        #Открой решу егэ
        def P7(self,command,list_programm):
                self.webbrowser.open("https://phys-ege.sdamgia.ru/?redir=1")
                self.ender_phrase(self)
        #Открой стим
        def P8(self,command,list_programm):

                link=(list_programm[1])
                if link[0]!='0':
                        self.os.startfile(link)
                        self.ender_phrase(self)
                else:
                        self.Voise('Данная программа не найдена')

        #Включи песню
        def P9(self,command,list_programm):

                non_txt = "включи песню"
                quest = command.replace(non_txt, '')
                o = self.Options()
                o.add_experimental_option("detach", True)
                o.add_argument("--disable-infobars")
                o.add_argument("start-maximized")
                o.add_argument("--disable-extensions")
                # Pass the argument 1 to allow and 2 to block
                o.add_experimental_option("prefs", {"profile.default_content_setting_values.notifications": 1})
                driver = self.webdriver.Chrome(options=o)
                driver.get('https://vk-save.com')
                promt = driver.find_element(self.By.XPATH, '//input')
                promt.click()
                windows = driver.window_handles
                driver.switch_to.window(windows[1])
                driver.close()
                driver.switch_to.window(windows[0])
                promt.send_keys(quest)
                self.time.sleep(4)
                song = driver.find_element(self.By.CLASS_NAME, 'audio')
                song.click()

        #Открой файлы
        def P10(self,command,list_programm):
                link=(list_programm[2])
                if link[0]!='0':
                        self.os.startfile(link)
                        self.ender_phrase(self)
                else:
                        self.os.startfile('C:')

        #Открой ютуб
        def P11(self,command,list_programm):
                self.webbrowser.open("https://www.youtube.com")
                self.ender_phrase(self)
                #Открой редактор кода
        def P12(self,command,list_programm):

                link=(list_programm[8])
                if link[0]!='0':
                        self.os.startfile(link)
                        self.ender_phrase(self)
                else:
                        self.Voise('Данная программа не найдена')

        #Создай новый текстовый файл
        def P13(self,command,list_programm):
                doc = self.aw.Document()
                Count_of_name = str(self.random.randrange(1,1000,1))
                name = 'test_file_№'+ Count_of_name +'.docx'
                doc.save(name)
                self.os.startfile(name)
                self.ender_phrase(self)
        # Открой камеру
        def P14(self,command,list_programm):

                link=(list_programm[3])
                if link[0]!='0':
                        self.os.startfile(link)
                        self.ender_phrase(self)
                else:
                        self.Voise('Данная программа не найдена')

        #Открой твич
        def P15(self,command,list_programm):
                self.webbrowser.open("https://www.twitch.tv")
                self.ender_phrase(self)
        #Выключи звук
        def P16(self,command,list_programm):
                devices = self.AudioUtilities.GetSpeakers()
                interface = devices.Activate(
                self.IAudioEndpointVolume._iid_, self.CLSCTX_ALL, None)
                volume = self.cast(interface, self.POINTER(self.IAudioEndpointVolume))
                volume.SetMasterVolumeLevelScalar(0, None) #Где 0 это 0% громкость
                self.ender_phrase(self)


        # Отправить уведомление
        def P17(self,command,list_programm):
                pass
        
        #Половина громкости
        def P18(self,command,list_programm):
                devices = self.AudioUtilities.GetSpeakers()
                interface = devices.Activate(
                self.IAudioEndpointVolume._iid_, self.CLSCTX_ALL, None)
                volume = self.cast(interface, self.POINTER(self.IAudioEndpointVolume))
                volume.SetMasterVolumeLevelScalar(0.5, None) #Где 0.5 это 50% громкость
                self.ender_phrase(self)
                #Открой переводчик
        def P19(self,command,list_programm):
                self.webbrowser.open("https://translate.yandex.ru/?lang=ru-en")
                self.ender_phrase(self)

        #Случайное число до 10
        def P20(self,command,list_programm):    
                self.Voise(str(self.random.randrange(0,10,1)))    
        #Случайное число до 100
        def P21(self,command,list_programm): 
                self.Voise(str(self.random.randrange(0,100,1)))

        #Очисти корзину
        def P22(self,confirm=False, show_progress=True, sound=False):
                flags = 0
                if not confirm:
                        flags |= self.shellcon.SHERB_NOCONFIRMATION
                if not show_progress:
                        flags |= self.shellcon.SHERB_NOPROGRESSUI
                if not sound:
                        flags |= self.shellcon.SHERB_NOSOUND
                self.shell.SHEmptyRecycleBin(None, None, flags)
                self.ender_phrase(self)
        #Открой генератор презентации
        def P23(self,command,list_programm):
                self.webbrowser.open("https://gamma.app")
                self.ender_phrase(self)
        #Закрой окно
        def P24(self,command,list_programm):
                self.pw.hotkey('alt', 'f4')
                self.ender_phrase(self)
        #Сверни все окна
        def P25(self,command,list_programm):
                self.pw.hotkey('winleft', 'd')
                self.ender_phrase(self)
        #Запусти доту
        def P26(self,command,list_programm):

                link=(list_programm[1])
                if link[0]!='0':
                        self.os.startfile('steam://rungameid/570')
                        self.ender_phrase(self)
                else:
                        self.Voise('Данная программа не найдена')

        #Закрой вкладку
        def P27(self,command,list_programm):
                self.pw.hotkey('ctrl', 'w')
                self.ender_phrase(self)
        #Сделай скриншот
        def P28(self,command,list_programm):
                self.pw.screenshot('Screen_001.png')
                self.os.startfile(self.os.path.realpath('Screen_001.png'))
                self.ender_phrase(self)

        # погода
        def P29(self,command,list_programm):
                import requests
                import json
                from main_core import city_m
                city = city_m
                url = 'https://api.openweathermap.org/data/2.5/weather?q='+city+'&units=metric&lang=ru&appid=79d1ca96933b0328e1c7e3e7a26cb347'
                weather_data = requests.get(url).json()
                weather_data_structure = json.dumps(weather_data, indent=2)
                temperature = round(weather_data['main']['temp'])
                # выводим значения на экран
                self.Voise('Сейчас в городе' +city+" "+ str(temperature)+ '°')

        # включи аниме
        def P30(self,command,list_programm):
                self.webbrowser.open("https://anilib.me/?section=all-updates")
                self.ender_phrase(self)
        #Открой дискорд
        def P31(self,command,list_programm):

                link=(list_programm[4])

                if link[0]!='0':
                        self.os.startfile(link)
                        self.ender_phrase(self)
                else:
                        self.Voise('Данная программа не найдена')

        #Найди в интернете
        def P32(self,command,list_programm):
                non_txt = "найди в интернете"
                quest = command.replace(non_txt, '')
                self.webbrowser.open("https://www.google.com/search?q="+quest )
                self.ender_phrase(self)
                

        #Протокол день рождение
        def P33(self,command,list_programm):
                self.P2(command,list_programm)
                self.Voise('С днем рождения Капитан')
        #Открой торрент
        def P34(self,command,list_programm):
                print(list_programm)
                link=(list_programm[5])
                if link[0]!='0':
                        self.os.startfile(link)
                        self.ender_phrase(self)
                else:
                        self.Voise('Данная программа не найдена')

        #Протокол работа
        def P35(self,command,list_programm):
                link=(list_programm[8])
                if link[0]!='0':
                        self.os.startfile(link)
                        self.ender_phrase(self)
                else:
                        self.Voise('Данная программа не найдена')
                self.P1(self,command,list_programm)
        
        #Протокол один дома
        def P36(self,command,list_programm):
                self.P1(self,command,list_programm)
                link=(list_programm[1])
                if link[0]!='0':
                        self.os.startfile(link)
                        self.ender_phrase(self)
                else:
                        self.Voise('Данная программа не найдена')
        #Протокол отдых
        def P37(self,command,list_programm):
                self.P1(self,command,list_programm)
        #Запусти торент игруха
        def P38(self,command,list_programm):
                self.webbrowser.open('https://itorrents-igruha.org/newgames/')
                self.ender_phrase(self)
        #запусти музыку и решу егэ
        def P39(self,command,list_programm):
                self.P1(self,command,list_programm)
                self.webbrowser.open("https://phys-ege.sdamgia.ru/?redir=1")

        #Выключи систему
        def P40(self,command,list_programm):

                self.Voise('отключение через 3')
                self.time.sleep(1)
                self.Voise('2')
                self.time.sleep(1)
                self.Voise('1')
                self.os.system("shutdown /p")
        #Спящий режим
        def P41(self,command,list_programm):
                self.os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")
        #Абсолют отбой
        def P42(self,command,list_programm):
                self.Voise('отключение программы через 3')
                self.time.sleep(1)
                self.Voise('2')
                self.time.sleep(1)
                self.Voise('1')
                self.os.kill(self.os.getpid(),9)

        #Создай новый текстовый файл
        def P43(self,command,list_programm):
                doc = self.aw.Document()
                Count_of_name = str(self.random.randrange(1,1000,1))
                name = 'test_file_№'+ Count_of_name +'.txt'
                doc.save(name)
                self.os.startfile(name)
                self.ender_phrase(self)
        # включи вотсап
        def P44(self,command,list_programm):
                self.webbrowser.open("https://web.whatsapp.com/")
                self.ender_phrase(self)
        #открой Фотошоп
        def P45(self,command,list_programm):

                link=(list_programm[6])
                if link[0]!='0':
                        self.os.startfile(link)
                        self.ender_phrase(self)
                else:
                        self.Voise('Данная программа не найдена')

        # Презагрузи пк
        def P46(self,command,list_programm): 
                self.Voise('перезагрузка через 3')
                self.time.sleep(1)
                self.Voise('2')
                self.time.sleep(1)
                self.Voise('1')
                self.os.system("shutdown /r")

        #открой видеоредактор
        def P47(self,command,list_programm):

                link=(list_programm[7])
                if link[0]!='0':
                        self.os.startfile(link)
                        self.ender_phrase(self)
                else:
                        self.Voise('Данная программа не найдена')

        #русская рулетка
        def P48(self,command,list_programm):
                d = self.random.randrange(1,7,1)
                if d == 6:
                        self.os.system("shutdown /p")    
                else: self.Voise(str(d)+" не повезло")

        #Смена языка
        def P49(self,command,list_programm):
                self.pw.hotkey('shiftleft', 'alt')
                self.ender_phrase(self)
        #Громкость на 75
        def numberr(self,quest):
                extractor = self.NumberExtractor()
                proc = extractor.replace_groups(quest)
                proc=int(proc)
                return proc
        def P50(self,command,list_programm):

                non_txt = "звук на"
                quest = command.replace(non_txt, '')
                if 'максимум' in quest:
                        proc = 1
                elif "половину" in quest:
                        proc = 0.5
                elif 'четверть' in quest:
                        proc = 0.25
                elif 'две четвери' in quest:
                        proc = 0.5
                elif 'три четвери' in quest:
                        proc =0.75

                elif self.numberr(self,quest)<=100:
                        extractor = self.NumberExtractor()
                        proc = extractor.replace_groups(quest)
                        proc=int(proc)/100
                else:
                        self.Voise('Громкость не задана')
                devices = self.AudioUtilities.GetSpeakers()
                interface = devices.Activate(
                self.IAudioEndpointVolume._iid_, self.CLSCTX_ALL, None)
                volume = self.cast(interface, self.POINTER(self.IAudioEndpointVolume))
                volume.SetMasterVolumeLevelScalar(proc, None) 
                self.ender_phrase(self)
        # включи почту
        def P51(self,command,list_programm):
                self.webbrowser.open("https://mail.google.com/mail/u/0/#inbox")
                self.ender_phrase(self)
        #Который час
        def P52(self,command,list_programm):
                time= self.datetime.datetime.now()
                time = str(time.hour) + " часов " +str(time.minute) +' минут '+str(time.second) + 'секунд'
                self.Voise(time)
        #Какая дата? 
        def P53(self,command,list_programm):
        
                nomber=['первое','второе','третье','четвертое','пятое','шестое','седьмое','восьмое','девятое','десятое','одинадцатое','двенадцатое','тринадцатое','четырнадцатое','пятнадцатое','шестнадцатое','семнадцатое','восемнадцатое','девятнадцатое','двацатое','двадцать первое','двадцать второе','двадцать третье','двадцать четвертое','двадцать пятое','двадцать шестое','двадцать седьмое','двадцать восьмое','двадцать девятое','тридцатое','тридцать первое']
                month = ['января','февраля','марта','апреля','мая','июня','июля','августа','сентября','октября','ноября','декабря']

                date= str(self.datetime.datetime.now().date())
                date = date.replace('-',' ').split()
                print(date)
                today =nomber[int(date[2])-1]+ month[int(date[1])-1]+ date[0]
                self.Voise(today)

        #Сколько дней до Нового года
        def P54(self,command,list_programm):
                now = self.datetime.datetime.today()
                NY = self.datetime.datetime(2025, 1, 1)
                d = NY-now                   
                mm, ss = divmod(d.seconds, 60)
                hh, mm = divmod(mm, 60)
                self.Voise('До нового года: {} дней {} часов {} минут {} секунд.'.format(d.days, hh, mm, ss))
        #Протокол Новый год
        def P55(self,command,list_programm):
                self.Voise('C новым годом сэр')
                self.P1(command,list_programm)
        #Открой калькулятор
        def P56(self,command,list_programm):

                link=(list_programm[9])
                if link[0]!='0':
                        self.os.startfile(link)
                        self.ender_phrase(self)
                else:
                        self.Voise('Данная программа не найдена')
        #пауза
        def P57(self,command,list_programm):
                self.pw.press("playpause")
                self.ender_phrase(self)

        #Что такое "(ввод слова)"
        def P58(self,command,list_programm):
                non_txt = "что такое"
                quest = command.replace(non_txt, '')
                self.webbrowser.open("https://www.google.com/search?q="+quest)
                self.ender_phrase(self)
        

        #Предыдущий трек
        def P59(self,command,list_programm):
                self.pw.press("prevtrack")
                self.ender_phrase(self)

        #Следущий трек
        def P60(self,command,list_programm):
                self.pw.press("nexttrack")
                self.ender_phrase(self)




































class Starting_pack(QThread):
        
        item2=pyqtSignal(str)
        item3=pyqtSignal(str)
        main=pyqtSignal(str)
        micro=0
        def __init__(self):
                super().__init__()
                import keyboard
                keyboard.add_hotkey('ctrl+0',self.micro_play)
                
                
        def run(self):
              
                def cheak(self,command,list_programm):
                        command=self.sinonims(command)
                        k=0
                        for x in methods:
                                if x in command:
                                        methods[x](pr, command,list_programm)
                                        break
                                else:        
                                        k+=1
                        if k==61:
                                self.Voice('Протокол не найден')
                                        
                def one():
                        self.item2.emit('Да')
                        self.item3.emit('Нет')
                        self.main.emit('Запускается')
                def two():
                        self.item2.emit('Да')
                        self.item3.emit('Да')
                        self.main.emit('Готов к работе')
                def three():
                        self.item2.emit('Нет')
                        self.item3.emit('Нет')
                        self.main.emit('Ошибка')
                one()
                name = name_m
                list_programm=self.prosmotr([])

                # Initialize the recognizer 
                self.Voice('Здравствуйте, меня зовут {}. Жду ваших указаний сэр'.format(name))
                r = sr.Recognizer()
                two()
                
                methods={
                        'ответь на вопрос':pr.P0,
                        "включи музыку":pr.P1,
                        "протокол депрессия":pr.P2,
                        "протокол суицид":pr.P3,
                        'включи браузер':pr.P4,
                        'включи telegram':pr.P5,
                        'включи вконтакте':pr.P6,
                        'включи вк':pr.P6,
                        'включи решу егэ':pr.P7,
                        'включи steam':pr.P8,
                        'включи песню':pr.P9,
                        'включи файлы':pr.P10,
                        'включи youtube':pr.P11,
                        'включи редактор кода':pr.P12,
                        'создай новый текстовый файл':pr.P13,
                        'включи камеру':pr.P14,
                        'включи twitch':pr.P15,
                        'выключи звук':pr.P16,
                        'отправь уведомление':pr.P17,
                        'половина громкости':pr.P18,
                        'включи переводчик':pr.P19,
                        'случайное число до десяти':pr.P20,
                        'случайное число до ста':pr.P21,
                        'очисти корзину':pr.P22,
                        'включи генератор презентации':pr.P23,
                        'закрой окно':pr.P24,
                        'сверни все окна':pr.P25,
                        'включи dota':pr.P26,
                        'закрой вкладку':pr.P27,
                        'сделай скриншот':pr.P28,
                        'погода':pr.P29,
                        'включи аниме':pr.P30,
                        'включи discord':pr.P31,
                        'найди в интернете':pr.P32,
                        'протокол день рождения':pr.P33,
                        'включи торрент':pr.P34,
                        'протокол работа':pr.P35,
                        'протокол один дома':pr.P36,
                        'протокол отдых':pr.P37,
                        'включи торрент игруха':pr.P38,
                        'включи музыку и решу егэ':pr.P39,
                        'выключи систему':pr.P40,
                        'спящий режим':pr.P41,
                        'отбой':pr.P42,
                        'создай новый лист':pr.P43,
                        'включи whatsapp':pr.P44,
                        'включи photoshop':pr.P45,
                        'презагрузи пк':pr.P46,
                        'включи видеоредактор':pr.P47,
                        'русская рулетка':pr.P48,
                        'смена языка':pr.P49,
                        'звук на':pr.P50,
                        'включи почту':pr.P51,
                        'который час':pr.P52,
                        'какая дата':pr.P53,
                        'сколько дней до нового года':pr.P54,
                        'протокол новый год':pr.P55,
                        'включи калькулятор':pr.P56,
                        'пауза':pr.P57,
                        'что такое':pr.P58,
                        'предыдущий трек':pr.P59,
                        'следущий трек':pr.P60
                        }
                
                while True:

                        try:
                                        # используйте микрофон в качестве источника ввода.
                                        with sr.Microphone() as source2:
                                                
                                                # Время на настройку громкости
                                                r.adjust_for_ambient_noise(source2, duration=0.2)
                                                
                                                # Прослушка голоса
                                                audio2 = r.listen(source2)
                                                
                                                # Использование Google для распознавания аудио
                                                MyText = r.recognize_google(audio2, language='ru-RU')
                                                command = MyText.lower()
                                                print(command)
                                                if name in command and command!='' and self.micro == 0 :
                                                        command = command.replace(name, "") 
                                                        command = self.sinonims(command)
                                                        print(command)
                                                        cheak(self,command,list_programm)
                                                        command=''


                                                else:
                                                        pass

                                # Ошибка запроса	
                        except sr.RequestError as e:
                                print("Нет интернета, ошибка; {0}".format(e))

                        # Ошибка распознования голоса (шум) 
                        # НЕ УДАЛЯТЬ иначе работать не будет!
                        except sr.UnknownValueError:
                                pass
     





        def prosmotr(self,list_programm):
                from os import walk, path, chdir
                from psutil import disk_partitions

                chdir('C:/')
                a=disk_partitions()
                chdir(path.dirname(path.abspath(__file__)))
                cont=[]
                for i in a:
                        cont+=str(i)[18]

                list=[]
                list2=[]

                link_programm= ['Telegram.exe','steam.exe','Этот компьютер - Ярлык.lnk','obs64.exe','Discord.exe', 'uTorrent.exe', 'Photoshop.exe','Adobe Premiere Pro.exe','Code.exe','calc.exe']

                for disk in cont:
                        for root, dirs, files in walk(disk+':'):  
                                for filename in files:
                                                if filename in link_programm:
                                                        list.append(filename)
                                                        list2.append(root)

                for x in link_programm:
                        if x in list:
                                list_programm.append(list2[list.index(x)]+'\\'+x)
                        else:
                                list_programm.append('0')
                print(list_programm)
                return list_programm                           



        
        def sinonims(self,phrase):
                W1=['запусти','включи','активируй','открой']
                W2=['громкость','звук']
                W3=['сколько время','который час','скажи время','напомни время']
                W4=['какая дата','что за число сегодня','какое число сегодня','какое сегодня число', "напомни дату"]
                W5=['ответите', 'ответьте','ответьтите','ответить']
                W0= W1+W2+W3+W4+W5
                for x in range(len(W0)):
                        if W0[x] in phrase:
                                for i in range(len(W1)): phrase = phrase.replace(W1[i], 'включи')
                                for i in range(len(W2)): phrase = phrase.replace(W2[i], 'звук')
                                for i in range(len(W3)): phrase = phrase.replace(W3[i], 'который час')
                                for i in range(len(W4)): phrase = phrase.replace(W4[i], 'какая дата')
                                for i in range(len(W5)): phrase = phrase.replace(W5[i], 'ответь')
                
                return phrase
        def Voice(self,phrase):
                case_gender=['Ирина','Александр','Анна',"Елена"]
                number = case_gender.index(voice_m.replace('\n',''))
                voises = ['','Aleksandr','Anna','Elena']
                tts = init()
                voices = tts.getProperty('voices')
                tts.setProperty('rate', speed_m+125)  # 150 words per minute
                tts.setProperty('volume', voulme_m/100)  # 80% volume
                for voice in voices:
                        if voice.name == voises[int(number)]:
                                tts.setProperty('voice', voice.id)
                tts.say(phrase)
                tts.runAndWait()


        # Включение микро
        def micro_play(self):
                if self.micro==0:
                        self.micro+=1
                        self.Voice('Микрофон выключен')
                else:
                        self.micro-=1
                        self.Voice('Микрофон включен')







class Ui_MainWindow(object):
    global name_m,voice_m,speed_m,voulme_m,city_m,music_m,list_programm
    list_programm=[]
    name_m = 'абсолют'
    voice_m = 'Ирина'
    voulme_m=90
    speed_m=50
    music_m=''
    city_m='Москва'
        
    def __init__(self):
        super().__init__()    
        self.thread = Starting_pack()
        





        
    def functions(self):
        self.button_start.clicked.connect(self.start_programm)

    def open_explo(self):
        pathes = path.dirname(path.abspath(__file__))
        startfile(pathes)
    def open_help_file(self):
        pass
    def open_site(self):
        from webbrowser import open
        open('https://anilib.me/?section=all-updates')

    def helper_write(self):
        try:
                con=sq.connect('last.db')
                cur= con.cursor()

                cur.execute("SELECT * FROM last_p ORDER BY rowid DESC LIMIT 3")
                a=[]
                for r in cur:
                        for x in r:
                                a.append(x)
                con.commit()
        except sq.Error as e:
                print('ERROR DATABASE')
        finally:
                con.close()


        try:
                self.label_13.setText(a[0])
                self.label_10.setText(a[1])
                self.label_12.setText(str(a[2]))
                self.label_11.setText(str(a[3]))
                try:
                        self.label_16.setText(a[6])
                        self.label_15.setText(a[7])
                        self.label_17.setText(str(a[8]))
                        self.label_14.setText(str(a[9]))
                        try:
                                self.label_20.setText(a[12])
                                self.label_19.setText(a[13])
                                self.label_21.setText(str(a[14]))
                                self.label_18.setText(str(a[15]))
                        except:print('нехватка ласт параметр 3')
                except:print('нехватка ласт параметр 2')
        except:print('нехватка ласт параметр 1')

    def start_programm(self):
        global name_m,voice_m,speed_m,voulme_m,music_m,city_m

        if self.last_chose.isChecked()==False:
            
            name_m = self.lineEdit.text()
            voice_m = self.chose_voise.currentText()
            speed_m=self.speed_slid.value()
            voulme_m=self.vpl_slid.value()
            music_m=self.musik_name_edit.text()
            city_m =self.musik_name_edit_2.text()

            try:
                con=sq.connect('last.db')
                cur= con.cursor()
                print('done')
                cur.execute(f"INSERT INTO last_p(name,voice,speed,voulme,music,city) VALUES(?, ?, ?, ?, ?, ?)",(name_m,voice_m,speed_m,voulme_m,music_m,city_m))
                con.commit()
            except sq.Error as e:
                print('ERROR DATABASE')
            finally:
                con.close()



            self.thread.start()
        elif self.last_chose.isChecked()==True:
                try:
                        con=sq.connect('last.db')
                        cur= con.cursor()

                        cur.execute("SELECT * FROM last_p ORDER BY rowid DESC LIMIT 1")
                        for a in cur:
                                name_m = a[0]
                                voice_m = a[1]
                                speed_m=a[2]
                                voulme_m=a[3]
                                music_m=a[4]
                                city_m =a[5]



                        con.commit()
                except sq.Error as e:
                        print('ERROR DATABASE')
                finally:
                        con.close()

                self.thread.start()
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 600)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1000, 600))
        MainWindow.setMaximumSize(QtCore.QSize(1000, 600))
        MainWindow.setBaseSize(QtCore.QSize(1000, 600))
        MainWindow.setStyleSheet("background: rgb(59, 59, 59);\n"
"color: rgb(245, 245, 245);\n"
"font: 700 11pt \"Verdana\";\n"
"")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setStyleSheet("background: rgb(80, 80, 80)")
        self.centralwidget.setObjectName("centralwidget")
        self.blok_voise = QtWidgets.QWidget(parent=self.centralwidget)
        self.blok_voise.setGeometry(QtCore.QRect(10, 10, 380, 220))
        self.blok_voise.setStyleSheet("background:rgb(97, 97, 97);\n"
"border-radius: 20%;")
        self.blok_voise.setObjectName("blok_voise")
        self.speed_slid = QtWidgets.QSlider(parent=self.blok_voise)
        self.speed_slid.setGeometry(QtCore.QRect(15, 100, 350, 25))
        self.speed_slid.setStyleSheet("background-color: rgba(130, 130, 130, 0);")
        self.speed_slid.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.speed_slid.setObjectName("speed_slid")
        self.vpl_slid = QtWidgets.QSlider(parent=self.blok_voise)
        self.vpl_slid.setGeometry(QtCore.QRect(15, 40, 350, 25))
        self.vpl_slid.setStyleSheet("background-color: rgba(130, 130, 130, 0);")
        self.vpl_slid.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.vpl_slid.setObjectName("vpl_slid")
        self.speed = QtWidgets.QLabel(parent=self.blok_voise)
        self.speed.setGeometry(QtCore.QRect(15, 70, 200, 20))
        self.speed.setStyleSheet("background-color: rgba(130, 130, 130, 0);")
        self.speed.setObjectName("speed")
        self.vol = QtWidgets.QLabel(parent=self.blok_voise)
        self.vol.setGeometry(QtCore.QRect(15, 10, 100, 20))
        self.vol.setStyleSheet("background-color: rgba(130, 130, 130, 0);")
        self.vol.setObjectName("vol")
        self.musik_name_edit = QtWidgets.QLineEdit(parent=self.blok_voise)
        self.musik_name_edit.setGeometry(QtCore.QRect(175, 135, 190, 20))
        self.musik_name_edit.setStyleSheet("background-color: rgb(130, 130, 130);")
        self.musik_name_edit.setInputMask("")
        self.musik_name_edit.setText("")
        self.musik_name_edit.setMaxLength(32767)
        self.musik_name_edit.setFrame(True)
        self.musik_name_edit.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
        self.musik_name_edit.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.musik_name_edit.setDragEnabled(False)
        self.musik_name_edit.setReadOnly(False)
        self.musik_name_edit.setObjectName("musik_name_edit")
        self.musik_name = QtWidgets.QLabel(parent=self.blok_voise)
        self.musik_name.setGeometry(QtCore.QRect(15, 135, 160, 20))
        self.musik_name.setObjectName("musik_name")
        self.musik_name_edit_2 = QtWidgets.QLineEdit(parent=self.blok_voise)
        self.musik_name_edit_2.setGeometry(QtCore.QRect(175, 170, 190, 20))
        self.musik_name_edit_2.setStyleSheet("background-color: rgb(130, 130, 130);")
        self.musik_name_edit_2.setInputMask("")
        self.musik_name_edit_2.setText("")
        self.musik_name_edit_2.setMaxLength(32767)
        self.musik_name_edit_2.setFrame(True)
        self.musik_name_edit_2.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
        self.musik_name_edit_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.musik_name_edit_2.setDragEnabled(False)
        self.musik_name_edit_2.setReadOnly(False)
        self.musik_name_edit_2.setObjectName("musik_name_edit_2")
        self.musik_name_2 = QtWidgets.QLabel(parent=self.blok_voise)
        self.musik_name_2.setGeometry(QtCore.QRect(15, 170, 160, 20))
        self.musik_name_2.setObjectName("musik_name_2")
        self.widget_2 = QtWidgets.QWidget(parent=self.centralwidget)
        self.widget_2.setGeometry(QtCore.QRect(410, 10, 580, 220))
        self.widget_2.setStyleSheet("background:rgb(97, 97, 97);\n"
"border-radius: 20%;")
        self.widget_2.setObjectName("widget_2")
        self.name = QtWidgets.QLabel(parent=self.widget_2)
        self.name.setGeometry(QtCore.QRect(15, 130, 70, 22))
        self.name.setObjectName("name")
        self.voise = QtWidgets.QLabel(parent=self.widget_2)
        self.voise.setGeometry(QtCore.QRect(305, 130, 100, 22))
        self.voise.setObjectName("voise")
        self.chose_voise = QtWidgets.QComboBox(parent=self.widget_2)
        self.chose_voise.setGeometry(QtCore.QRect(385, 130, 180, 22))
        self.chose_voise.setStyleSheet("color:rgb(255, 255, 255);\n"
"background-color: rgb(130, 130, 130);\n"
"border-color: rgb(255, 255, 255);")
        self.chose_voise.setObjectName("chose_voise")
        self.chose_voise.addItem("")
        self.chose_voise.addItem("")
        self.chose_voise.addItem("")
        self.chose_voise.addItem("")
        self.main_name = QtWidgets.QLabel(parent=self.widget_2)
        self.main_name.setGeometry(QtCore.QRect(140, 10, 300, 50))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setStrikeOut(False)
        self.main_name.setFont(font)
        self.main_name.setStyleSheet("font: 700  20pt \"Verdana\";\n"
"background-color: rgba(130, 130, 130, 0);")
        self.main_name.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.main_name.setObjectName("main_name")
        self.lineEdit = QtWidgets.QLineEdit(parent=self.widget_2)
        self.lineEdit.setGeometry(QtCore.QRect(95, 130, 180, 22))
        self.lineEdit.setStyleSheet("background-color: rgb(130, 130, 130);")
        self.lineEdit.setObjectName("lineEdit")
        self.warning = QtWidgets.QLabel(parent=self.widget_2)
        self.warning.setGeometry(QtCore.QRect(15, 164, 550, 41))
        self.warning.setScaledContents(False)
        self.warning.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.warning.setWordWrap(True)
        self.warning.setObjectName("warning")
        self.widget_3 = QtWidgets.QWidget(parent=self.centralwidget)
        self.widget_3.setGeometry(QtCore.QRect(10, 250, 380, 320))
        self.widget_3.setStyleSheet("background:rgb(97, 97, 97);\n"
"border-radius: 20%;")
        self.widget_3.setObjectName("widget_3")
        self.last_chose = QtWidgets.QCheckBox(parent=self.widget_3)
        self.last_chose.setGeometry(QtCore.QRect(15, 15, 350, 20))
        self.last_chose.setIconSize(QtCore.QSize(16, 16))
        self.last_chose.setChecked(True)
        self.last_chose.setObjectName("last_chose")
        self.last_chose_label = QtWidgets.QLabel(parent=self.widget_3)
        self.last_chose_label.setGeometry(QtCore.QRect(15, 50, 350, 20))
        self.last_chose_label.setObjectName("last_chose_label")
        self.label_6 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_6.setGeometry(QtCore.QRect(15, 85, 87, 40))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_7.setGeometry(QtCore.QRect(102, 85, 87, 40))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_8.setGeometry(QtCore.QRect(190, 85, 87, 40))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_9.setGeometry(QtCore.QRect(277, 85, 87, 40))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_10.setGeometry(QtCore.QRect(102, 140, 87, 40))
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_11.setGeometry(QtCore.QRect(277, 140, 87, 40))
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_12.setGeometry(QtCore.QRect(190, 140, 87, 40))
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_13.setGeometry(QtCore.QRect(15, 140, 87, 40))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_14.setGeometry(QtCore.QRect(277, 195, 87, 40))
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_15.setGeometry(QtCore.QRect(102, 195, 87, 40))
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_16.setGeometry(QtCore.QRect(15, 195, 87, 40))
        self.label_16.setObjectName("label_16")
        self.label_17 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_17.setGeometry(QtCore.QRect(190, 195, 87, 40))
        self.label_17.setObjectName("label_17")
        self.label_18 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_18.setGeometry(QtCore.QRect(277, 250, 87, 40))
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_19.setGeometry(QtCore.QRect(102, 250, 87, 40))
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_20.setGeometry(QtCore.QRect(15, 250, 87, 40))
        self.label_20.setObjectName("label_20")
        self.label_21 = QtWidgets.QLabel(parent=self.widget_3)
        self.label_21.setGeometry(QtCore.QRect(190, 250, 87, 40))
        self.label_21.setObjectName("label_21")
        self.widget_4 = QtWidgets.QWidget(parent=self.centralwidget)
        self.widget_4.setGeometry(QtCore.QRect(410, 250, 270, 320))
        self.widget_4.setStyleSheet("background:rgb(97, 97, 97);\n"
"border-radius: 20%;")
        self.widget_4.setObjectName("widget_4")
        self.name_of_file = QtWidgets.QListWidget(parent=self.widget_4)
        self.name_of_file.setGeometry(QtCore.QRect(15, 15, 120, 281))
        self.name_of_file.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.name_of_file.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhNone)
        self.name_of_file.setAutoScroll(False)
        self.name_of_file.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.name_of_file.setProperty("showDropIndicator", False)
        self.name_of_file.setDefaultDropAction(QtCore.Qt.DropAction.CopyAction)
        self.name_of_file.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
        self.name_of_file.setTextElideMode(QtCore.Qt.TextElideMode.ElideMiddle)
        self.name_of_file.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollMode.ScrollPerPixel)
        self.name_of_file.setMovement(QtWidgets.QListView.Movement.Static)
        self.name_of_file.setFlow(QtWidgets.QListView.Flow.TopToBottom)
        self.name_of_file.setProperty("isWrapping", False)
        self.name_of_file.setResizeMode(QtWidgets.QListView.ResizeMode.Fixed)
        self.name_of_file.setLayoutMode(QtWidgets.QListView.LayoutMode.Batched)
        self.name_of_file.setViewMode(QtWidgets.QListView.ViewMode.ListMode)
        self.name_of_file.setModelColumn(0)
        self.name_of_file.setBatchSize(100)
        self.name_of_file.setObjectName("name_of_file")
        item = QtWidgets.QListWidgetItem()
        self.name_of_file.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.name_of_file.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.name_of_file.addItem(item)
        self.icon_of_file = QtWidgets.QListWidget(parent=self.widget_4)
        self.icon_of_file.setGeometry(QtCore.QRect(135, 15, 120, 291))
        self.icon_of_file.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.icon_of_file.setAutoScroll(False)
        self.icon_of_file.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.icon_of_file.setProperty("showDropIndicator", False)
        self.icon_of_file.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
        self.icon_of_file.setTextElideMode(QtCore.Qt.TextElideMode.ElideLeft)
        self.icon_of_file.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollMode.ScrollPerItem)
        self.icon_of_file.setMovement(QtWidgets.QListView.Movement.Static)
        self.icon_of_file.setFlow(QtWidgets.QListView.Flow.TopToBottom)
        self.icon_of_file.setResizeMode(QtWidgets.QListView.ResizeMode.Fixed)
        self.icon_of_file.setLayoutMode(QtWidgets.QListView.LayoutMode.Batched)
        self.icon_of_file.setViewMode(QtWidgets.QListView.ViewMode.ListMode)
        self.icon_of_file.setObjectName("icon_of_file")
        item = QtWidgets.QListWidgetItem()
        self.icon_of_file.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.icon_of_file.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.icon_of_file.addItem(item)
        self.workind_or_not = QtWidgets.QLabel(parent=self.widget_4)
        self.workind_or_not.setGeometry(QtCore.QRect(15, 210, 240, 70))
        self.workind_or_not.setStyleSheet("font: 700 14pt \"Verdana\";\n"
"background-color: rgba(130, 130, 130, 0);\n"
"")
        self.workind_or_not.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.workind_or_not.setObjectName("workind_or_not")
        self.widget_5 = QtWidgets.QWidget(parent=self.centralwidget)
        self.widget_5.setGeometry(QtCore.QRect(700, 250, 290, 320))
        self.widget_5.setStyleSheet("background:rgb(97, 97, 97);\n"
"border-radius: 20%;")
        self.widget_5.setObjectName("widget_5")
        self.button_start = QtWidgets.QPushButton(parent=self.widget_5)
        self.button_start.setGeometry(QtCore.QRect(30, 190, 230, 50))
        self.button_start.setStyleSheet("font: 700 18pt \"Verdana\";\n"
"background-color: rgb(130, 130, 130);\n"
"border-radius: 10%")
        self.button_start.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhNone)
        self.button_start.setCheckable(False)
        self.button_start.setChecked(False)
        self.button_start.setAutoRepeat(False)
        self.button_start.setAutoExclusive(False)
        self.button_start.setAutoDefault(False)
        self.button_start.setDefault(False)
        self.button_start.setFlat(False)
        self.button_start.setObjectName("button_start")
        self.widget_5.raise_()
        self.blok_voise.raise_()
        self.widget_2.raise_()
        self.widget_3.raise_()
        self.widget_4.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 24))
        font = QtGui.QFont()
        font.setFamily("Verdana")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        self.menubar.setFont(font)
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(parent=self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.action = QtGui.QAction(parent=MainWindow)
        self.action.setObjectName("action")
        self.action_2 = QtGui.QAction(parent=MainWindow)
        self.action_2.setObjectName("action_2")
        self.action_3 = QtGui.QAction(parent=MainWindow)
        self.action_3.setObjectName("action_3")
        self.menu.addAction(self.action)
        self.menu.addAction(self.action_2)
        self.menu.addAction(self.action_3)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.speed.setText(_translate("MainWindow", "Скорость речи"))
        self.vol.setText(_translate("MainWindow", "Громкость"))
        self.musik_name_edit.setPlaceholderText(_translate("MainWindow", "https://"))
        self.musik_name.setText(_translate("MainWindow", "Любимая музыка:"))
        self.musik_name_edit_2.setPlaceholderText(_translate("MainWindow", "Москва"))
        self.musik_name_2.setText(_translate("MainWindow", "Город:"))
        self.name.setText(_translate("MainWindow", "Имя:"))
        self.voise.setText(_translate("MainWindow", "Голос:"))
        self.chose_voise.setItemText(0, _translate("MainWindow", "Ирина"))
        self.chose_voise.setItemText(1, _translate("MainWindow", "Александр"))
        self.chose_voise.setItemText(2, _translate("MainWindow", "Анна"))
        self.chose_voise.setItemText(3, _translate("MainWindow", "Елена"))
        self.main_name.setText(_translate("MainWindow", "Absolute V2"))
        self.warning.setText(_translate("MainWindow", "Внимание! Имена с непроизносимыми символами и на иностранном языке не обрабатываются"))
        self.last_chose.setText(_translate("MainWindow", "Использовать последние настройки"))
        self.last_chose_label.setText(_translate("MainWindow", "Последние настройки:"))
        self.label_6.setText(_translate("MainWindow", "Имя:"))
        self.label_7.setText(_translate("MainWindow", "Голос:"))
        self.label_8.setText(_translate("MainWindow", "Гром-ть:"))
        self.label_9.setText(_translate("MainWindow", "Скорость:"))
        self.label_10.setText(_translate("MainWindow", "-"))
        self.label_11.setText(_translate("MainWindow", "-"))
        self.label_12.setText(_translate("MainWindow", "-"))
        self.label_13.setText(_translate("MainWindow", "-"))
        self.label_14.setText(_translate("MainWindow", "-"))
        self.label_15.setText(_translate("MainWindow", "-"))
        self.label_16.setText(_translate("MainWindow", "-"))
        self.label_17.setText(_translate("MainWindow", "-"))
        self.label_18.setText(_translate("MainWindow", "-"))
        self.label_19.setText(_translate("MainWindow", "-"))
        self.label_20.setText(_translate("MainWindow", "-"))
        self.label_21.setText(_translate("MainWindow", "-"))
        __sortingEnabled = self.name_of_file.isSortingEnabled()
        self.name_of_file.setSortingEnabled(False)
        item = self.name_of_file.item(0)
        item.setText(_translate("MainWindow", "main_core"))
        item = self.name_of_file.item(1)
        item.setText(_translate("MainWindow", "protocols"))
        item = self.name_of_file.item(2)
        item.setText(_translate("MainWindow", "voice"))
        self.name_of_file.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.icon_of_file.isSortingEnabled()
        self.icon_of_file.setSortingEnabled(False)
        item = self.icon_of_file.item(0)
        item.setText(_translate("MainWindow", "Да"))
        item = self.icon_of_file.item(1)
        item.setText(_translate("MainWindow", "Нет"))
        self.thread.item2.connect(item.setText)
        item = self.icon_of_file.item(2)
        item.setText(_translate("MainWindow", "Нет"))
        self.thread.item3.connect(item.setText)
        self.icon_of_file.setSortingEnabled(__sortingEnabled)
        self.workind_or_not.setText(_translate("MainWindow", "ПО не работает"))
        self.thread.main.connect(self.workind_or_not.setText)
        self.button_start.setText(_translate("MainWindow", "ПУСК!"))
        self.menu.setTitle(_translate("MainWindow", "Меню"))
        self.action.setText(_translate("MainWindow", "Файлы"))
        self.action_2.setText(_translate("MainWindow", "Сайт"))
        self.action_3.setText(_translate("MainWindow", "Очистить последние"))
        self.action.triggered.connect(self.open_explo)
        self.action_2.triggered.connect(self.open_site)
        self.action_3.triggered.connect(self.open_help_file)
        
        self.functions()
        self.helper_write()



if __name__ == "__main__":

    from sys import argv, exit
    import os
    if os.path.isfile("last.db"):
            pass
    else:
        f=open('last.db', 'w')
        f.close()
    app = QtWidgets.QApplication(argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    
    MainWindow.show()
    exit(app.exec())
    



































